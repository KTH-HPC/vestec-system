import sys
#sys.path.append("../")
from manager import workflow
import os
import pony.orm as pny
import datetime
import time
import json
from base64 import b64decode
from Database import LocalDataStorage
from Database.workflow import Simulation
from DataManager.client import registerDataWithDM, putByteDataViaDM, DataManagerException
from SimulationManager.client import createSimulation, submitSimulation, SimulationManagerException
from ExternalDataInterface.client import registerEndpoint, ExternalDataInterfaceException, removeEndpoint
from time import sleep

# The remote_hello workflow prints a hello world message on a remote machine
@workflow.handler
def remote_hello (message):
  print ("Starting remote hello  (" + message["IncidentID"] + ")")
  # What to call when the execution is completed
  callbacks = {'COMPLETED': 'simple_workflow_execution_completed'}    

  print("Create Sim")
  try:
      sim_id=createSimulation(message["IncidentID"], 1, "00:10", "test run", "helloworld.scp", callbacks, template_dir="template")
  except SimulationManagerException as err:
      print("Error creating simulation "+err.message)
      return
  
  simulation=Simulation[sim_id]

#  data_blob="Sample configuration file"
#  print ("putData")
#  try:
#      data_uuid=putByteDataViaDM("configuration.txt", "ARCHER", "simulation configuration file", "text/plain", "VESTEC autogenerated", data_blob, path=simulation.directory)
#      print("Data uuid is "+data_uuid)
#  except DataManagerException as err:
#      print("Error creating configuration file on machine, continuing without! "+err.message)            
  print ("Submit")
  try:
      submitSimulation(sim_id)
  except SimulationManagerException as err:
      print("Error submitting simulation "+err.message)
 
 
@workflow.handler
def shutdown_hworld_remote (message):
  print("Shutdown remote helloworld workflow for " + message["IncidentID"])

  try:
      removeEndpoint(message["IncidentID"], "Shutdown", "shutdown")
  except ExternalDataInterfaceException as err:
      print("Error from EDI on endpoint removal " + err.message)

  workflow.Cancel(message["IncidentID"])

@workflow.handler
def initialize_hworld_remote (message):
  print("Init remote helloworld workflow for " + message["IncidentID"])
  try:
      registerEndpoint(message["IncidentID"], "Shutdown", "shutdown")
  except ExternalDataInterfaceException as err:
      print("Error from EDI on registration " + err.message)

  workflow.setIncidentActive(message["IncidentID"])
  # Start remote hello handler
  workflow.send (queue = "hello_hworld_remote", message = message)

@workflow.handler
def hworld_remote_workflow_execution_completed(message):
    print("Stage completed with simulation ID " + message["simulationId"])


# Register the workflows
def RegisterHandlers ():
  workflow.RegisterHandler (remote_hello, "hello_hworld_remote")
  workflow.RegisterHandler (shutdown_hworld_remote, "shutdown_hworld_remote")
  workflow.RegisterHandler (initialize_hworld_remote, "init_hworld_remote")
  workflow.RegisterHandler (hworld_remote_workflow_execution_completed, "complete_hworld_remote")
